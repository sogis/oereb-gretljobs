apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
//import java.nio.file.Paths
//import java.nio.file.Files
import java.io.File
import de.undercouch.gradle.tasks.download.Download

def tmpFolder = new File(project.buildDir, 'temp/');
tmpFolder.mkdir();

def pdfExportFolder = new File(project.buildDir, 'oerebadaarch/');
pdfExportFolder.mkdir();


def iliModelBasis = "OeREBKRM_V2_0"
def iliModelTransferstruktur = "OeREBKRMtrsfr_V2_0"
def iliModelSymbole = "SO_AGI_OeREB_Legendeneintraege_20211020"

def oerebSchemaName = "ada_archaeologie_oerebv2"

def dataSetName = "ch.so.ada.oereb_einzelschutz_archaeologie"
def xtfFile = new File(tmpFolder ,dataSetName + "_V2_0.xtf")
def xtfZipFileName = dataSetName + "_V2_0_xtf.zip"
def emptyTransferFileName = dataSetName + ".empty.xtf"

def symbolsDataSetName = dataSetName + "_flaeche.symbole" 
def symbolsFileName = symbolsDataSetName + ".xtf" 


def bucketSuffix = '-undefined'
if ( gretlEnvironment == 'production' ) {
    bucketSuffix = ''
} else if ( gretlEnvironment == 'integration' || gretlEnvironment == 'dev' ) {
    bucketSuffix = '-' + gretlEnvironment.substring(0, 3)
} else {
    bucketSuffix = '-' + gretlEnvironment
}

def responsibleOfficesBaseUrl = "https://s3.eu-central-1.amazonaws.com/ch.so.agi.geodata$bucketSuffix/"

def responsibleOfficesDataSet = "ch.so.agi.oereb_zustaendigestellen_V2_0"
def responsibleOfficesFile = new File(tmpFolder, responsibleOfficesDataSet + ".xtf")

def s3AdaStageBucket = "ch.so.ada.archaeologie-stage$bucketSuffix"
def s3AdaLiveBucket = "ch.so.ada.archaeologie$bucketSuffix"

def s3AgiTargetBucket = "ch.so.agi.geodata$bucketSuffix"

task deleteFromOereb(type: SqlExecutor) {
    description = "Löscht die Daten aus dem Transferschema."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["sql/delete_all_tables.sql"]
}

task downloadResponsibleOffices(type: Download, dependsOn: 'deleteFromOereb') {
    doFirst {
        println responsibleOfficesBaseUrl + responsibleOfficesDataSet + ".xtf"
    }
    description = "Download zuständige Stellen ($responsibleOfficesDataSet)."
    src responsibleOfficesBaseUrl + responsibleOfficesDataSet + ".xtf"
    dest tmpFolder
    overwrite true
}

task importResponsibleOfficesToOereb(type: Ili2pgReplace, dependsOn: 'downloadResponsibleOffices') {
    description = "Import zuständige Stellen ($responsibleOfficesDataSet)."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelBasis
    dbschema = oerebSchemaName
    dataFile = responsibleOfficesFile
    importBid = true
    dataset = responsibleOfficesDataSet
}

task importSymbolToOereb(type: Ili2pgReplace, dependsOn: "deleteFromOereb") {
    description = "Import Flächensymbol"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = oerebSchemaName
    dataset = symbolsDataSetName
    models = iliModelSymbole
    dataFile = file(symbolsFileName);
    disableValidation = true
    importBid = true
    importTid = true
}

task importEmptyTransferToOereb(type: Ili2pgReplace, dependsOn: 'deleteFromOereb') {
    description = "Import eines leeren Grund-Basket damit notwendige Datasets- und Basketrecords für Transferdaten in der DB erstellt werden."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelTransferstruktur
    dbschema = oerebSchemaName
    dataFile = file(emptyTransferFileName)
    importBid = true
    dataset = dataSetName
}

task transferData(type: SqlExecutor, dependsOn: ["deleteFromOereb", "importResponsibleOfficesToOereb", "importSymbolToOereb", "importEmptyTransferToOereb"]) {
    description = "Führt den Datenumbau in das Transferschema durch."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [
        s3AdaLiveBucket: "'" + s3AdaLiveBucket + "'"
    ]
    sqlFiles = [
        "sql/insert_darstellungsdienst.sql",
        "sql/insert_legende.sql",
        "sql/insert_beschraenkung_et_al.sql",
        "sql/insert_dokument_uris.sql"
    ]
}

task exportData(type: Ili2pgExport, dependsOn: "transferData") {
    description = "Exportiert die umgebauten Daten aus dem Transferschema in ein INTERLIS-Datei."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelTransferstruktur
    dbschema = oerebSchemaName
    dataFile = xtfFile
    dataset = dataSetName
    disableValidation = true
}

task replaceWmsServer(dependsOn: "exportData") {
    description = "Ersetzt verschiedene Elemente (Host, Pfad, etc.) der WMS-Requests."
    doLast {
        ant.replace(
        file: xtfFile,
        token: '$wmsHost$',
        value: 'https://' + geoservicesHostName,
        encoding: 'UTF-8')
    }
}

task validateData(type: IliValidator, dependsOn: "replaceWmsServer") {
    description = "Validiert die exportierten Daten in der Transferstruktur inkl. der externen Beziehungen."
    dataFiles = [
                 responsibleOfficesFile,
                 xtfFile
                ]
    logFile = "ilivalidator.log"
    allObjectsAccessible = true
}

task localExec(dependsOn: validateData)

/*

task importDataToStage(type: Ili2pgReplace, dependsOn: "validateData") {
    description = "Import des Planungszonen-ÖREB-Datensatz in das Stage-Schema."
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    models = iliModelTransferstruktur
    dbschema = "stage"
    dataFile = file(Paths.get("$rootDir", xtfFileName))
    dataset = planungszonenDataSet 
    importBid = true
    importTid = true
    disableValidation = true
}

task refreshOerebWMSTablesStage(type: SqlExecutor) {
    description = "Aktualisiert OEREB WMS Tabellen."
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    sqlFiles = ["update_oerebwms_tables.sql"]
    sqlParameters = [dbSchema: 'stage']
}

task importDataToLive(type: Ili2pgReplace) {
    description = "Import des Planungszonen-ÖREB-Datensatz in das Live-Schema."
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    models = iliModelTransferstruktur
    dbschema = "live"
    dataFile = file(Paths.get("$rootDir", xtfFileName))
    dataset = planungszonenDataSet 
    importBid = true
    importTid = true
    disableValidation = true
}

task refreshOerebWMSTablesLive(type: SqlExecutor) {
    description = "Aktualisiert OEREB WMS Tabellen."
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    sqlFiles = ["update_oerebwms_tables.sql"]
    sqlParameters = [dbSchema: 'live']
}

task zipXtfFile(type: Zip) {
    description = "Zipt das XTF-File mit den Planungszonen für den Upload nach S3"
    from "$rootDir"
    include xtfFileName
    archiveName xtfZipFileName
    destinationDir(file("$rootDir"))
}

task uploadXtfToS3Geodata(type: S3Upload, dependsOn: "zipXtfFile") {
    description = "XTF-File nach S3 hochladen."
    accessKey = awsAccessKeyAgi
    secretKey = awsSecretAccessKeyAgi
    sourceFile = file(Paths.get("$rootDir", xtfZipFileName))
    endPoint = "https://s3.eu-central-1.amazonaws.com"
    region = "eu-central-1"
    bucketName = s3AgiTargetBucket
    acl = "public-read"
}
*/