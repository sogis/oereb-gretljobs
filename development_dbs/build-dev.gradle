import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

ext {
    pathToTempFolder = System.getProperty("java.io.tmpdir")

    iliModelVorschriften = "OeREBKRMvs_V1_1"
    iliModelTransferstruktur = "OeREBKRMtrsfr_V1_1"

    federalLegalBasisBaseUrl = "http://models.geo.admin.ch/V_D/OeREB/"
    federalLegalBaseDataSet = "OeREBKRM_V1_1_Gesetze_20180501"

    cantonalLegalBasisBaseUrl = "https://geo.so.ch/geodata/ch.so.sk.gesetze.oereb/"
    cantonalLegalBaseDataSet = "ch.so.sk.gesetze"

    iliModelLandUsePlans = "SO_Nutzungsplanung_20171118"
    dbSchemaLandUsePlans = "arp_npl"
    landUsePlansDataSets = ["2405", "2408", "2456", "2457", "2473", "2474", "2475", "2476", "2498", "2501", "2502", "2514", "2573", "2580", "2613", "2614", "2615"]
    landUsePlansBaseUrl = "https://s3.eu-central-1.amazonaws.com/ch.so.arp.nutzungsplanung/"
    
    iliModelGroundwaterProtection = "PlanerischerGewaesserschutz_LV95_V1_1"
    dbSchemaGroundwaterProtection = "afu_gewaesserschutz"
    groundwaterProtectionDataFile = "afu_gewaesserschutz.xtf"
    groundwaterProtectionBaseUrl = "https://raw.githubusercontent.com/sogis/oereb-gretljobs/master/development_dbs/"
}    

// Cannot use GRETL for ili2pgImportSchema since not all v4 options
// are exposed. 
task createSchemaLandUsePlans(type: SqlExecutor){
    database = [dbUriEdit, "admin", "admin"]
    sqlFiles = ['arp_npl.sql', 'arp_npl_grants.sql']
}

landUsePlansDataSets.each { landUsePlansDataSet ->
    def dataSet = landUsePlansDataSet.toString()
    task "downloadLandUsePlansData_$dataSet"(type: Download) {
        src landUsePlansBaseUrl + dataSet + ".xtf"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    task "replaceLandUsePlansData_$dataSet"(type: Ili2pgReplace, dependsOn: "downloadLandUsePlansData_$dataSet") {
        database = [dbUriEdit, dbUserEdit, dbPwdEdit]
        models = iliModelLandUsePlans
        dbschema = dbSchemaLandUsePlans
        dataFile = file(Paths.get(pathToTempFolder.toString(), dataSet + ".xtf"))
        dataset = dataSet
        disableValidation = true
    }
}

task replaceLandUsePlansData() {
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('replaceLandUsePlansData_') }
    }
}

/*
task uploadToS3(type: AmazonS3FileUploadTask) {
    description = "Hochladen der exportierten Datei auf S3."
	file file("$rootDir/" + xtfFileName) 
	bucketName "ch.so.arp.nutzungsplanung.oereb"
	key xtfFileName

	def m = new ObjectMetadata()
	m.setCacheControl("no-cache, no-store")
	objectMetadata = m
}
*/

task createSchemaGroundwaterProtection(type: SqlExecutor){
    database = [dbUriEdit, "admin", "admin"]
    sqlFiles = ['afu_gewaesserschutz.sql', 'afu_gewaesserschutz_grants.sql']
}

task downloadGroundwaterProtectionData(type: Download) {
    src groundwaterProtectionBaseUrl + groundwaterProtectionDataFile
    dest pathToTempFolder
    overwrite true
    doLast {
        println "File downloaded to: " + pathToTempFolder
    }        
}

task replaceGroundwaterProtectionData(type: Ili2pgImport, dependsOn: "downloadGroundwaterProtectionData") {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelGroundwaterProtection
    dbschema = dbSchemaGroundwaterProtection
    dataFile = file(Paths.get(pathToTempFolder.toString(), groundwaterProtectionDataFile))
    deleteData = true
    disableValidation = true
}


task downloadFederalLegalBasis(type: Download) {
    description = "Download Bundesgesetze ($federalLegalBaseDataSet)."
    src federalLegalBasisBaseUrl + federalLegalBaseDataSet + ".xml"
    dest pathToTempFolder
    overwrite true      
}

task importFederalLegalBasisToOereb(type: Ili2pgReplace, dependsOn: 'downloadFederalLegalBasis') {
    description = "Import Bundesgesetze ($federalLegalBaseDataSet) in das stage Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelVorschriften
    dbschema = "stage"
    dataFile = file(Paths.get(pathToTempFolder.toString(), federalLegalBaseDataSet + ".xml"))
    dataset = "ch.admin.bk.gesetze" 
    disableValidation = true
}

task downloadCantonalLegalBasis(type: Download) {
    description = "Download kantonale Gesetze ($cantonalLegalBaseDataSet)."
    src cantonalLegalBasisBaseUrl + cantonalLegalBaseDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true    
}

task importCantonalLegalBasisToOereb(type: Ili2pgReplace, dependsOn: 'downloadCantonalLegalBasis') {
    description = "Import kantonale Gesetze ($cantonalLegalBaseDataSet) in das stage Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelVorschriften
    dbschema = "stage"
    dataFile = file(Paths.get(pathToTempFolder.toString(), cantonalLegalBaseDataSet + ".xtf"))
    dataset = cantonalLegalBaseDataSet 
    disableValidation = true
}

