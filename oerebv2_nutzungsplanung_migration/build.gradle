apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

defaultTasks "deleteOldNplDatasetStage"

def iliModelTransferstruktur = "OeREBKRMtrsfr_V2_0"

def xtfFileName = "ch.so.arp.oereb_nutzungsplanung_V2_0.xtf"
//def xtfFileName = "ch.so.arp.oereb_nutzungsplanung.empty.xtf"

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, 'unzip_data')
def pathToUserFolder = System.getProperty("user.dir")

task deleteOldNplDatasetStage(type: Ili2pgDelete) {
    description = "Löscht einmalig das kantonsweite Dataset der kommunalen NPL im Stage-Schema"
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    models = iliModelTransferstruktur
    dbschema = "stage"
    dataset = "ch.so.arp.oereb_nutzungsplanung"
    failOnException = false
}

task deleteOldNplDatasetLive(type: Ili2pgDelete) {
    description = "Löscht einmalig das kantonsweite Dataset der kommunalen NPL im Live-Schema"
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    models = iliModelTransferstruktur
    dbschema = "live"
    dataset = "ch.so.arp.oereb_nutzungsplanung"
    failOnException = false
}

task replaceOldFullDataToTestStage(type: Ili2pgReplace) {
    description = "Importiere den aktuellen Datensatz kommunale Nutzungsplanung\n\
                  des ganzen Kantons in das Schema test_stage in der edit Datenbank"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelTransferstruktur
    dbschema = 'test_stage'
    // Achtung: diese Datei muss aus den gleichen Daten erzeugt worden sein, wie
    // die Datei pro Gemeinde!!
    dataFile = file(Paths.get("$rootDir", xtfFileName))                                                                                                                                                             
    dataset = "ch.so.arp.oereb_nutzungsplanung"
    importBid = false
    importTid = true
    disableValidation = true
}

task countObjectsTestStage(type: SqlExecutor){
    description = "Zähle die Objekte gemäss der zuständigen Stelle im kantonalen Datensatz"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["count_transferstruktur_test_stage.sql"]
    sqlParameters = [bfsnr: bfsnr]
}

task countObjectsOerebStage(type: SqlExecutor){
    description = "Zähle die Objekte gemäss Gemeinde Dataset"
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    sqlFiles = ["count_transferstruktur_stage_dataset.sql"]
    sqlParameters = [bfsnr: bfsnr]
}

/**
 * Die folgenden Task können verwendet werden um einzelne Shapefiles zu
 * exportieren.
 */
task createViewObjectsTestStage(type: SqlExecutor){
    description = "Erstelle eine Tabellen View pro Geometrietyp"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["view_transferstruktur_test_stage.sql"]
    sqlParameters = [bfsnr: bfsnr]
}

task exportObjectsFlaecheTestStage(type: ShpExport){
    dependsOn createViewObjectsTestStage
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    schemaName = "test_stage"
    tableName = "transferstruktur_geom_zustelle_flaeche"
    dataFile = "transferstruktur_geom_zustelle_flaeche." + bfsnr + ".shp"
}

task exportObjectsLinieTestStage(type: ShpExport){
    dependsOn createViewObjectsTestStage
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    schemaName = "test_stage"
    tableName = "transferstruktur_geom_zustelle_linie"
    dataFile = "transferstruktur_geom_zustelle_linie." + bfsnr + ".shp"
}

task exportObjectsPunktTestStage(type: ShpExport){
    dependsOn createViewObjectsTestStage
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    schemaName = "test_stage"
    tableName = "transferstruktur_geom_zustelle_punkt"
    dataFile = "transferstruktur_geom_zustelle_punkt." + bfsnr + ".shp"
}

