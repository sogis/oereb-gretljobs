apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

defaultTasks "deleteOldNplDatasetLive"

def iliModelTransferstruktur = "OeREBKRMtrsfr_V2_0"
def iliModelKonfiguration = "OeREBKRMkvs_V2_0"

def xtfFileName = "ch.so.arp.oereb_nutzungsplanung_V2_0.xtf"
//def xtfFileName = "ch.so.arp.oereb_nutzungsplanung.empty.xtf"

def dbSchemaKonfiguration = "agi_konfiguration_oerebv2"
def dataSet = "verfuegbarkeit"

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, 'unzip_data')
def pathToUserFolder = System.getProperty("user.dir")

task deleteOldNplDatasetStage(type: Ili2pgDelete) {
    description = "Löscht einmalig das kantonsweite Dataset der kommunalen NPL\n\
                   im Stage-Schema"
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    models = iliModelTransferstruktur
    dbschema = "stage"
    dataset = "ch.so.arp.oereb_nutzungsplanung"
    failOnException = false
}

task deleteOldNplDatasetLive(type: Ili2pgDelete) {
    dependsOn deleteOldNplDatasetStage
    description = "Löscht einmalig das kantonsweite Dataset der kommunalen NPL\n\
                   im Live-Schema"
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    models = iliModelTransferstruktur
    dbschema = "live"
    dataset = "ch.so.arp.oereb_nutzungsplanung"
    failOnException = false
}

task replaceHttpsToHttp(type: SqlExecutor) {
    description = "Ändert die SSL Verbindungen in der Tabelle oerebkrm_v2_0_localiseduri von HTTPS zu HTTP"
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    sqlFiles = ["update_https_to_http.sql"]
}

task replaceHttpToHttps(type: SqlExecutor) {
    description = "Ändert die SSL Verbindungen in der Tabelle oerebkrm_v2_0_localiseduri von HTTP zu HTTPS"
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    sqlFiles = ["update_http_to_https.sql"]
}


/**
 * Benenne die hochgeladene Datei um
 */
task copyXtfFile(type: Copy) {
    from "upload/"
    into "upload/"
    include("uploadFile")
    rename("uploadFile", "ch.so.agi.oereb_verfuegbarkeit_V2_0.xtf")
}

/**
 * Aktualisiere die Verfügbarkeit der Datensätze mittels Ili2pgUpdate. Dieser
 * Task muss ausgeführt werden, um die Verfügbarkeit der Nutzungsplanung 
 * "runterzunehmen" und nach Abschluss der Arbeiten wieder aufzuschalten
 */
task updateKonfigurationVerfuegbarkeit(type: Ili2pgReplace) {
    dependsOn "copyXtfFile"
    description = "Importiere die Konfiguration der verfügbaren Datensätze"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelKonfiguration
    dbschema = dbSchemaKonfiguration
    dataFile = "upload/ch.so.agi.oereb_verfuegbarkeit_V2_0.xtf"
    dataset = dataSet
    importBid = true
    importTid = true
}

/**
 * Achtung: Task mitsamt wird nur während Entwicklung zur Überprüfung der
 * Datensätze verwendet!
 *
task replaceOldFullDataToTestStage(type: Ili2pgReplace) {
description = "Importiere den aktuellen Datensatz kommunale Nutzungsplanung\n\
des ganzen Kantons in das Schema test_stage in der edit Datenbank"
database = [dbUriEdit, dbUserEdit, dbPwdEdit]
models = iliModelTransferstruktur
dbschema = 'test_stage'
// Achtung: diese Datei muss aus den gleichen Daten erzeugt worden sein, wie
// die Datei pro Gemeinde!!
dataFile = file(Paths.get("$rootDir", xtfFileName))                                                                                                                                                             
dataset = "ch.so.arp.oereb_nutzungsplanung"
importBid = false
importTid = true
disableValidation = true
}

/**
 * Achtung: Task mitsamt SQL Datenbankabfrage wird nur während Entwicklung zur
 * Überprüfung der Datensätze verwendet!
 *
task countObjectsTestStage(type: SqlExecutor){
description = "Zähle die Objekte gemäss der zuständigen Stelle im kantonalen Datensatz"
database = [dbUriEdit, dbUserEdit, dbPwdEdit]
sqlFiles = ["count_transferstruktur_test_stage.sql"]
sqlParameters = [bfsnr: bfsnr]
}

/**
 * Achtung: Task mitsamt SQL Datenbankabfrage wird nur während Entwicklung zur
 * Überprüfung der Datensätze verwendet!
 *
task countObjectsOerebStage(type: SqlExecutor){
description = "Zähle die Objekte gemäss Gemeinde Dataset"
database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
sqlFiles = ["count_transferstruktur_stage_dataset.sql"]
sqlParameters = [bfsnr: bfsnr]
}*/