import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

ext {
    pathToTempFolder = System.getProperty("java.io.tmpdir")

    iliModelTransferstruktur = "OeREBKRMtrsfr_V1_1"
    symbolsWmsBaseUrl = "https://geo-t.so.ch"
    xtfFileName = "ch.so.arp.nutzungsplanung.oereb.xtf"

    federalLegalBasisBaseUrl = "http://models.geo.admin.ch/V_D/OeREB/"
    federalLegalBaseDataSet = "OeREBKRM_V1_1_Gesetze_20180501"

    cantonalLegalBasisBaseUrl = "https://geo.so.ch/geodata/ch.so.sk.gesetze.oereb/"
    cantonalLegalBaseDataSet = "ch.so.sk.gesetze"
}

def wmsLayerList = [
    "ch.so.Nutzungsplanung.NutzungsplanungGrundnutzung",
    "ch.so.Nutzungsplanung.NutzungsplanungUeberlagernd.Flaeche",
    "ch.so.Nutzungsplanung.NutzungsplanungUeberlagernd.Linie",
    "ch.so.Nutzungsplanung.NutzungsplanungUeberlagernd.Punkt",
    "ch.so.Nutzungsplanung.Baulinien",
    "ch.so.Nutzungsplanung.Sondernutzungsplaene"
]

task transferData(type: SqlExecutor) {
    description = "Löscht bestehende Daten im Transferschema und führt einen neuen Datenumbau aus."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["delete_oereb_landuseplans_tables.sql", "insert_oereb_landuseplans_tables.sql"]
}

/*
wmsLayerList.each { wmsLayer ->
    task "updateSymbols_$wmsLayer"(type: OerebIconizerQgis3) {
        description = "Erzeugt die Symbole für die einzelnen Legendeneinträge für $wmsLayer."
        sldUrl = "$symbolsWmsBaseUrl/wms/oereb-symbols?&SERVICE=WMS&REQUEST=GetStyles&LAYERS=$wmsLayer&SLD_VERSION=1.1.0"
        legendGraphicUrl = "$symbolsWmsBaseUrl/wms/oereb-symbols?SERVICE=WMS&REQUEST=GetLegendGraphic&LAYER=$wmsLayer&FORMAT=image/png&RULELABEL=false&LAYERTITLE=false&HEIGHT=35&WIDTH=70&SYMBOLHEIGHT=3&SYMBOLWIDTH=6&DPI=300"
        database = [dbUriEdit, dbUserEdit, dbPwdEdit]
        dbQTable = "arp_npl_oereb.transferstruktur_legendeeintrag"
        typeCodeAttrName = "artcode"
        symbolAttrName = "symbol"
        useCommunalTypeCodes = true
    }
}

task updateSymbols(dependsOn: "transferData") {
    description = "Aggregationstask für das Updaten der Symbole."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('updateSymbols_') }
    }
}
*/

//task exportData(type: Ili2pgExport, dependsOn: "updateSymbols") {
task exportData(type: Ili2pgExport, dependsOn: "transferData") {
    description = "Exportiert die umgebauten Daten aus dem Transferschema in ein INTERLIS-Datei."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelTransferstruktur
    dbschema = "arp_npl_oereb"
    dataFile = "$rootDir/" + xtfFileName
    dataset = "ch.so.arp.nutzungsplanung"
    disableValidation = true
}

task downloadFederalLegalBasis(type: Download, dependsOn: "updateSymbols") {
    description = "Download Bundesgesetze ($federalLegalBaseDataSet)."
    src federalLegalBasisBaseUrl + federalLegalBaseDataSet + ".xml"
    dest pathToTempFolder
    overwrite true      
}

task downloadCantonalLegalBasis(type: Download, dependsOn: "updateSymbols") {
    description = "Download kantonale Gesetze ($cantonalLegalBaseDataSet)."
    src cantonalLegalBasisBaseUrl + cantonalLegalBaseDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true    
}

task validateData(type: IliValidator, dependsOn: ["exportData", "downloadFederalLegalBasis", "downloadCantonalLegalBasis"]) {
    description = "Validiert die exportierten Daten in der Transferstruktur inkl. der externen Beziehungen."
    dataFiles = [file(Paths.get(pathToTempFolder.toString(), federalLegalBaseDataSet + ".xml")), 
        file(Paths.get(pathToTempFolder.toString(), cantonalLegalBaseDataSet + ".xtf")), 
        file(Paths.get(pathToTempFolder.toString(), xtfFileName))]
    logFile = "ilivalidator.log"
    allObjectsAccessible = true
}

task importDataToStage(type: Ili2pgReplace, dependsOn: "validateData") {
    description = "Import des NPL-ÖREB-Datensatz in das Stage-Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelTransferstruktur
    dbschema = dbSchema
    dataFile = file(Paths.get(pathToTempFolder.toString(), landUsePlansDataSet + ".xtf"))
    dataset = landUsePlansDataSet
    disableValidation = true 
}

task importDataToLive(type: Ili2pgReplace) {
    description = "Import des NPL-ÖREB-Datensatz in das Live-Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelTransferstruktur
    dbschema = dbSchema
    dataFile = file(Paths.get(pathToTempFolder.toString(), landUsePlansDataSet + ".xtf"))
    dataset = landUsePlansDataSet
    disableValidation = true 
}
