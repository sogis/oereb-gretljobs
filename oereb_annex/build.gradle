import ch.so.agi.gretl.api.*
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "ch.so.agi.gretl"
apply plugin: "de.undercouch.download"

defaultTasks "importOEREBAnnex"

def GROUP = "oereb-annex_import"
def dbSchemas = ["stage","live"]
def pathToTempFolder = System.getProperty("java.io.tmpdir")

//OEREB-Annex-import
dbSchemas.each { dbSchema ->
    task "downloadAnnexAktiveGemeinden_$dbSchema"(type: Download){
        description = "Download Annex Data Aktive Gemeinden"
        group = GROUP
        src "https://raw.githubusercontent.com/sogis/oerebdaten/master/oereb_annex/ch.so.agi.OeREB_extractAnnex-AktiveGemeinden.xtf"
        dest pathToTempFolder
        overwrite true
    }

    task "importAnnexAktiveGemeinden_$dbSchema"(type: Ili2pgReplace, dependsOn: "downloadAnnexAktiveGemeinden_$dbSchema"){
        description = "Import Annex Data Aktive Gemeinden"
        group = GROUP
        database = [dbUriOereb, dbUserOereb, dbPwdOereb]
        models = "OeREB_ExtractAnnex_V1_0"
        dbschema = "$dbSchema"
        dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.agi.OeREB_extractAnnex-AktiveGemeinden.xtf"))
        dataset = "ch.so.agi.oereb_extract_annex.aktive_gemeinden"
        disableValidation = true
    }

    task "downloadAnnexKatasterAmt_$dbSchema"(type: Download, dependsOn: "importAnnexAktiveGemeinden_$dbSchema"){
        description = "Download Annex Data Katasteramt"
        group = GROUP
        src "https://raw.githubusercontent.com/sogis/oerebdaten/master/oereb_annex/ch.so.agi.OeREB_extractAnnex-KatatasterAmt.xtf"
        dest pathToTempFolder
        overwrite true
    }

    task "importAnnexKatasteramt_$dbSchema"(type: Ili2pgReplace, dependsOn: "downloadAnnexKatasterAmt_$dbSchema"){
        description = "Import Annex Data Katasteramt"
        group = GROUP
        database = [dbUriOereb, dbUserOereb, dbPwdOereb]
        models = "OeREB_ExtractAnnex_V1_0"
        dbschema = "$dbSchema"
        dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.agi.OeREB_extractAnnex-KatatasterAmt.xtf"))
        dataset = "ch.so.agi.oereb_extract_annex.katasteramt"
        disableValidation = true
    }

    task "downloadAnnexStammdaten_$dbSchema"(type: Download, dependsOn: "importAnnexKatasteramt_$dbSchema"){
        description = "Download Annex Stammdaten"
        group = GROUP
        src "https://raw.githubusercontent.com/sogis/oerebdaten/master/oereb_annex/ch.so.agi.OeREB_extractAnnex-Stammdaten.xtf"
        dest pathToTempFolder
        overwrite true
    }

    task "importAnnexStammdaten_$dbSchema"(type: Ili2pgReplace, dependsOn: "downloadAnnexStammdaten_$dbSchema"){
        description = "Import Annex Stammdaten"
        group = GROUP
        database = [dbUriOereb, dbUserOereb, dbPwdOereb]
        models = "OeREB_ExtractAnnex_V1_0"
        dbschema = "$dbSchema"
        dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.agi.OeREB_extractAnnex-Stammdaten.xtf"))
        dataset = "ch.so.agi.oereb_extract_annex.stammdaten"
        disableValidation = true
    }
}

// this task is the main task to be started
task importOEREBAnnex() {
    description = "Aggregationstask."
    group = GROUP
    doLast {
        println "Ã–REB annex data imported."
    }
}

// finds all tasks from the each loop and sets them as dependants
importOEREBAnnex.dependsOn {
    tasks.findAll { task -> task.name.startsWith('importAnnexStammdaten_') }
}
