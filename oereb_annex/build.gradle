import ch.so.agi.gretl.api.*
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "ch.so.agi.gretl"
apply plugin: "de.undercouch.download"

defaultTasks "importOEREBAnnex"

def GROUP = "oereb-annex_data-transfer"
def pathToTempFolder = System.getProperty("java.io.tmpdir")
def annexModel = "OeREB_ExtractAnnex_V1_0"
def xtfFile = "ch.so.agi.OeREB_extractAnnex.xtf"
def dbSchemas = ["stage","live"]

task "updateAVImportDate"(type: SqlExecutor){
    description = "Update des AV-Import Datums per Gemeinde"
    group = GROUP
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["update_avimportdate_in_annex_model.sql"]
}

//OEREB-Annex-Export
task "exportAnnexData"(type: Ili2pgExport, dependsOn: "updateAVImportDate") {
    description = "Export of the OEREB Annex Data from editdb into INTERLIS-File $xtfFile"
    group = GROUP
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = annexModel
    dbschema = "agi_oereb_annex"
    dataFile = "$rootDir/" + "$xtfFile"
    disableValidation = false
}

dbSchemas.each { dbSchema ->
    task "importAnnexData_$dbSchema"(type: Ili2pgReplace, dependsOn: "exportAnnexData"){
        description = "Import Annex live Data into Schema $dbSchema with dataset $xtfFile"
        group = GROUP
        database = [dbUriOereb, dbUserOereb, dbPwdOereb]
        models = annexModel
        dataset = "ch.so.agi.OeREB_extractAnnex"
        dbschema = "$dbSchema"
        dataFile = "$rootDir/" + "$xtfFile"
        disableValidation = false
    }
}

// this task is the main task to be started
task importOEREBAnnex() {
    description = "Aggregationstask."
    group = GROUP
    doLast {
        println "Ã–REB annex data imported."
    }
}

// finds all tasks from the each loop and sets them as dependants
importOEREBAnnex.dependsOn {
    tasks.findAll { task -> task.name.startsWith('importAnnexData_') }
}
